@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IInitialStateLoader InitialStateLoader
@inject ILayoutService LayoutService

@code {
    @* https://github.com/JamesNK/Newtonsoft.Json/issues/2020#issuecomment-518351156 *@
    private System.ComponentModel.ReferenceConverter ReferenceConverter = new System.ComponentModel.ReferenceConverter(typeof(Layout));
}

@if (Route == null)
{
    <p><em>Waiting on Layout Service...</em></p>
    return;
}

<CascadingValue Value="@Route.Sitecore">
    <Layout Route="@Route" />
</CascadingValue>

@code {
    private bool _initialLoad = true;

    [Parameter]
    public LayoutServiceResult Route { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var routePath = NavigationManager.GetSitecoreRoutePath();

        if (_initialLoad)
        {
            _initialLoad = false;
            var initialState = await InitialStateLoader.GetInitialStateAsync();
            if (initialState != null)
            {
                Route = initialState;
                return;
            }
        }

        Route = await LayoutService.GetRouteDataAsync(routePath, null);
    }
}
