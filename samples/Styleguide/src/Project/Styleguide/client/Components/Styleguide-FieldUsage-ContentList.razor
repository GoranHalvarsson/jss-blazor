@inherits JssComponentBase
@using Newtonsoft.Json.Linq;

@*
    Demonstrates usage of a Content List field type within JSS.
    Content Lists are references to 0..n other content items.
    In Sitecore terms, this maps by default to a Treelist field.
*@
<Styleguide_Specimen Component="@Component"
                     E2eId="styleguide-fieldusage-content-list">
    <h5>Shared Content List</h5>
    @*
        Content List fields are returned with their value as an array of the referenced items.
        So we can use foreach to traverse them.
    *@
    @foreach (var localField in LocalContentField)
    {
        <div>
            @* The referenced item's fields can be rendered and edited using normal helper components: *@
            <p>
                Field: <PlainText Field="@localField" />
            </p>
        </div>
    }

    @foreach (var sharedField in SharedContentField)
    {
        <div>
            @* The referenced item's fields can be rendered and edited using normal helper components: *@
            <p>
                Field: <PlainText Field="@sharedField" />
            </p>
        </div>
    }
</Styleguide_Specimen>

@code {
    List<Core.Models.LayoutService.Fields.Field> LocalContentField { get; set; }
    List<Core.Models.LayoutService.Fields.Field> SharedContentField { get; set; }

    class FieldValue : JssBlazor.Core.Models.LayoutService.Fields.IFieldValue
    {
        public string Rendered { get; set; }
        public JToken RawValue { get; set; }
    }

    protected override void OnParametersSet()
    {
        LocalContentField = GetField("localContentList");
        SharedContentField = GetField("sharedContentList");
    }

    private List<Core.Models.LayoutService.Fields.Field> GetField(string fieldName)
    {
        var fields = new List<Core.Models.LayoutService.Fields.Field>();
        var contentField = Component.Fields[fieldName];
        var fieldValues = ((JssBlazor.Core.Models.LayoutService.Fields.ArrayFieldValue)contentField.Value).FieldValue.ToList();

        foreach (var fieldValueItem in fieldValues)
        {
            var rawFields = fieldValueItem["fields"].Children();

            foreach (JProperty fieldProp in rawFields)
            {
                string value = fieldProp.Value["value"].Value<string>();
                JToken jTokenValue = (JToken)fieldProp.Value;

                var field = new Core.Models.LayoutService.Fields.Field()
                {
                    Value = new FieldValue() { Rendered = value, RawValue = jTokenValue }
                };

                fields.Add(field);
            }
        }

        return fields;
    }
}
