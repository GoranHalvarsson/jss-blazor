@RenderPlaceholder()

@code {
    [Parameter]
    private string Name { get; set; }

    [Parameter]
    private RenderedItem Rendering { get; set; }

    private RenderFragment RenderPlaceholder() => builder =>
    {
        var components = Rendering.Placeholders[Name];
        foreach (var component in Rendering.Placeholders[Name])
        {
            // need to make this string somehow a global thing or use reflection
            var selectedType = GetComponentType(component.ComponentName);
            if (selectedType == null)
            {
                // create a missing component
                var missingTypeString = $"JssBlazor.Client.Shared.Jss.Components.MissingComponent, JssBlazor.Client";
                selectedType = Type.GetType(missingTypeString);
                builder.OpenComponent(0, selectedType);
                builder.AddAttribute(1, "ComponentName", component.ComponentName);
            }
            else
            {
                // needs to handled dynamically
                builder.OpenComponent(0, selectedType);
                builder.AddAttribute(1, "Component", component);
            }

            builder.CloseComponent();
        }
    };

    private Type GetComponentType(string componentName)
    {
        try
        {
            return Type.GetType(componentName);
        }
        catch
        {
            return null;
        }
    }
}
