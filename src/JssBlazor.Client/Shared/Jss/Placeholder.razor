@RenderPlaceholder()

@code {
    [Parameter]
    private string Name { get; set; }

    [Parameter]
    private LayoutServiceResponse Rendering { get; set; }

    private RenderFragment RenderPlaceholder() => builder =>
    {
        var components = Rendering.Placeholders[Name];
        foreach (var component in Rendering.Placeholders[Name])
        {
            // need to make this string somehow a global thing or use reflection
            var selectedType = Type.GetType(component.ComponentName);
            if(selectedType == null)
            {
                // create a missing component
                var missingTypeString = $"JssBlazor.Client.Shared.Jss.Components.MissingComponent, JssBlazor.Client";
                Type.GetType(missingTypeString);
                builder.OpenComponent(0, selectedType);
                builder.AddAttribute(1, "ComponentName", component.ComponentName);
            }
            else
            {
                // needs to handled dynamically
                builder.OpenComponent(0, selectedType);

                builder.AddAttribute(1, "Fields", new ContentBlockModel
                {
                    Heading = component.Fields["heading"],
                    Content = component.Fields["content"]
                });
            }
            
            builder.CloseComponent();
        }
    };
}
