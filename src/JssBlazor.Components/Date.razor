@inherits ComponentBase

@RenderDate()

@code {
    public enum DateStringFormat { LongTimeString, LongDateString, ShortTimeString, ShortDateString };
    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public Field Field { get; set; }

    [Parameter]
    public DateStringFormat Format { get; set; }

    [Parameter]
    public string Tag { get; set; } = "span";

    [Parameter]
    public bool Editable { get; set; } = true;

    [Parameter]
    public IDictionary<string, string> HtmlAttributes { get; set; } = new Dictionary<string, string>();

    private RenderFragment RenderDate() => builder =>
    {
        if (Field == null || (!string.IsNullOrWhiteSpace(Field.Editable) && Field.Value == null))
        {
            return;
        }


        var value = Field.GetFieldValue<DateTime>();
        var result = value.ToLongDateString();

        switch (Format)
        {
            case DateStringFormat.LongDateString:
                result = value.ToLongDateString();
                break;
            case DateStringFormat.LongTimeString:
                result = value.ToLongTimeString();
                break;
            case DateStringFormat.ShortDateString:
                result = value.ToShortDateString();
                break;
            case DateStringFormat.ShortTimeString:
                result = value.ToShortTimeString();
                break;
        }



        var output = (!string.IsNullOrWhiteSpace(Field.Editable) && Editable) ? Field.Editable : result;

        HtmlAttributes.Add("class", Class);

        builder.OpenElement(0, Tag);
        foreach (var attribute in HtmlAttributes)
        {
            builder.AddAttribute(1, attribute.Key, attribute.Value);
        }
        builder.AddMarkupContent(2, output);
        builder.CloseElement();
    };
}
