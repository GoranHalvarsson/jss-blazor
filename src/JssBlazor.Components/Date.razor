@inherits ComponentBase

@RenderDate()

@code {
    [Parameter]
    public Field Field { get; set; }

    [Parameter]
    public string Tag { get; set; }

    [Parameter]
    public bool Editable { get; set; } = true;

    [Parameter]
    public RenderFragment<DateRenderContext> Render { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> HtmlAttributes { get; set; } = new Dictionary<string, object>();

    private RenderFragment RenderDate() => builder =>
    {
        if (Field == null || (!string.IsNullOrWhiteSpace(Field.Editable) && Field.Value == null))
        {
            return;
        }

        if (Editable && !string.IsNullOrWhiteSpace(Field.Editable))
        {
            var tag = string.IsNullOrWhiteSpace(Tag) ? "span" : Tag;
            builder.OpenElement(0, tag);
            builder.AddMultipleAttributes(1, HtmlAttributes);
            builder.AddMarkupContent(2, Field.Editable);
            builder.CloseElement();
            return;
        }

        var dateTime = Field.Value.RawValue.ToObject<DateTime>();
        if (Render != null)
        {
            if (string.IsNullOrWhiteSpace(Tag))
            {
                Render.Invoke(new DateRenderContext { Date = dateTime })(builder);
                return;
            }

            builder.OpenElement(0, Tag);
            builder.AddMultipleAttributes(1, HtmlAttributes);
            Render.Invoke(new DateRenderContext { Date = dateTime })(builder);
            builder.CloseElement();
            return;
        }
        else
        {
            var rendered = dateTime.ToString("yyyy-MM-ddTHH:mm:ssK");
            if (string.IsNullOrWhiteSpace(Tag))
            {
                builder.AddContent(0, rendered);
                return;
            }

            builder.OpenElement(0, Tag);
            builder.AddMultipleAttributes(1, HtmlAttributes);
            builder.AddContent(2, rendered);
            builder.CloseElement();
            return;
        }
    };
}
