@inherits ComponentBase

@RenderImage()

@code {
    [Parameter]
    public Field Field { get; set; }

    [Parameter]
    public bool Editable { get; set; } = true;

    [Parameter]
    public ImageSizeParameters ImageParams { get; set; }

    [Parameter]
    public IEnumerable<ImageSizeParameters> SrcSet { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> HtmlAttributes { get; set; } = new Dictionary<string, object>();

    private RenderFragment RenderImage() => builder =>
    {
        if (!(Field is ImageField imageField)
            || string.IsNullOrWhiteSpace(imageField.Editable) && imageField.Value == null)
        {
            return;
        }

        // we likely have an experience editor value, should be a string
        if (Editable && !string.IsNullOrWhiteSpace(imageField.Editable))
        {
            var foundImg = MediaApi.FindEditorImageTag(imageField.Editable);
            if (foundImg == null)
            {
                GetEditableWrapper(imageField.Editable)(builder);
                return;
            }

            var foundImgAttributes = new Dictionary<string, object>();
            // Note: HtmlAttributes may override values from foundImg.Attrs, e.g., `style`, `class` values
            // We do not attempt to merge.
            foreach (var attribute in HtmlAttributes.Concat(foundImg.Attrs))
            {
                if (foundImgAttributes.ContainsKey(attribute.Key)) continue;
                foundImgAttributes.Add(attribute.Key, attribute.Value);
            }

            var imgAttr = GetImageAttributes(foundImgAttributes["src"]?.ToString(), SrcSet, foundImgAttributes, ImageParams);
            var imgHtml = BuildImgHtml(imgAttr);
            var editableMarkup = imageField.Editable.Replace(foundImg.ImgTag, imgHtml);
            GetEditableWrapper(editableMarkup)(builder);
            return;
        }

        var imageAttributes = GetImageAttributes(imageField.Value.Src, SrcSet, HtmlAttributes, ImageParams);
        if (imageAttributes == null) return;

        builder.OpenElement(0, "img");
        builder.AddMultipleAttributes(1, imageAttributes);
        builder.CloseElement();
    };

    private RenderFragment GetEditableWrapper(string editableMarkup) => builder =>
    {
        builder.OpenElement(0, "span");
        builder.AddAttribute(1, "class", "sc-image-wrapper");
        builder.AddMultipleAttributes(1, HtmlAttributes);
        builder.AddMarkupContent(2, editableMarkup);
        builder.CloseElement();
    };

    private static IDictionary<string, object> GetImageAttributes(
        string src,
        IEnumerable<ImageSizeParameters> srcSet,
        IDictionary<string, object> otherAttrs,
        ImageSizeParameters imageParams)
    {
        var newAttributes = new Dictionary<string, object>(otherAttrs);
        // update image URL for jss handler and image rendering params
        var resolvedSrc = MediaApi.UpdateImageUrl(src, imageParams);
        if (srcSet != null && srcSet.Any())
        {
            newAttributes["srcSet"] = MediaApi.GetSrcSet(resolvedSrc, srcSet, imageParams);
        }
        else
        {
            newAttributes["src"] = resolvedSrc;
        }
        return newAttributes;
    }

    private static string BuildImgHtml(IDictionary<string, object> attributes)
    {
        var imgHtml = new StringBuilder();
        imgHtml.Append("<img ");
        foreach (var attribute in attributes)
        {
            imgHtml.Append($"{attribute.Key}=\"{attribute.Value}\" ");
        }
        imgHtml.Append("/>");
        return imgHtml.ToString();
    }
}
