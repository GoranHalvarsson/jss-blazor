@using System.Text;
@inherits ComponentBase

@RenderImage()

@code {
    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public Field Field { get; set; }

    [Parameter]
    public bool Editable { get; set; } = true;

    [Parameter]
    public ImageSizeParameters ImageParams { get; set; }

    [Parameter]
    public IEnumerable<ImageSizeParameters> SrcSet { get; set; }

    [Parameter]
    public IDictionary<string, string> HtmlAttributes { get; set; } = new Dictionary<string, string>();

    private RenderFragment GetEditableWrapper(string editableMarkup) => builder =>
    {
        builder.OpenElement(0, "span");
        builder.AddAttribute(1, "class", "sc-image-wrapper");
        foreach (var attribute in HtmlAttributes)
        {
            builder.AddAttribute(1, attribute.Key, attribute.Value);
        }
        builder.AddMarkupContent(2, editableMarkup);
        builder.CloseElement();
    };

    private RenderFragment RenderImage() => builder =>
    {
        if (Field == null || (string.IsNullOrWhiteSpace(Field.Editable) && Field.Value == null && string.IsNullOrWhiteSpace(Field.Src)))
        {
            return;
        }

        // we likely have an experience editor value, should be a string
        if (Editable && !string.IsNullOrWhiteSpace(Field.Editable))
        {
            var foundImg = MediaApi.FindEditorImageTag(Field.Editable);
            if (foundImg == null)
            {
                GetEditableWrapper(Field.Editable)(builder);
                return;
            }

            var foundImgAttributes = new Dictionary<string, string>();
            foreach (var htmlAttribute in HtmlAttributes)
            {
                foundImgAttributes.Add(htmlAttribute.Key, htmlAttribute.Value);
            }
            foreach (var foundImgAttribute in foundImg.Attrs)
            {
                if (foundImgAttributes.ContainsKey(foundImgAttribute.Key)) continue;
                foundImgAttributes.Add(foundImgAttribute.Key, foundImgAttribute.Value);
            }

            var imgAttr = GetImageAttributes(foundImgAttributes["src"], SrcSet, foundImgAttributes, ImageParams);
            var imgHtml = BuildImgHtml(imgAttr);
            var editableMarkup = Field.Editable.Replace(foundImg.ImgTag, imgHtml.ToString());
            GetEditableWrapper(editableMarkup)(builder);
            return;
        }

        // some wise-guy/gal is passing in a 'raw' image object value
        IDictionary<string, string> imageAttributes = null;
        if (!string.IsNullOrWhiteSpace(Field.Src))
        {
            imageAttributes = GetImageAttributes(Field.Src, SrcSet, HtmlAttributes, ImageParams);
        }
        else if (Field.Value?.RawValue != null)
        {
            string src = null;
            var foundImgAttributes = new Dictionary<string, string>();
            foreach (var htmlAttribute in HtmlAttributes)
            {
                if ("src".Equals(htmlAttribute.Key, StringComparison.InvariantCultureIgnoreCase))
                {
                    src = htmlAttribute.Value;
                    continue;
                }
                foundImgAttributes.Add(htmlAttribute.Key, htmlAttribute.Value);
            }
            foreach (var foundImgAttribute in Field.Value.RawValue)
            {
                var key = foundImgAttribute.Path;
                if ("src".Equals(key, StringComparison.InvariantCultureIgnoreCase) && string.IsNullOrWhiteSpace(src))
                {
                    src = Field.Value.RawValue[key].ToString();
                    continue;
                }
                if (foundImgAttributes.ContainsKey(key)) continue;
                var value = Field.Value.RawValue[key].ToString();
                foundImgAttributes.Add(key, value);
            }
            imageAttributes = GetImageAttributes(Field.Value.RawValue["src"]?.ToString(), SrcSet, foundImgAttributes, ImageParams);
        }
        if (imageAttributes == null) return;

        builder.OpenElement(0, "img");
        foreach (var imageAttribute in imageAttributes)
        {
            builder.AddAttribute(1, imageAttribute.Key, imageAttribute.Value);
        }
        builder.CloseElement();
    };

    private IDictionary<string, string> GetImageAttributes(
        string src,
        IEnumerable<ImageSizeParameters> srcSet,
        IDictionary<string, string> otherAttrs,
        ImageSizeParameters imageParams)
    {
        var newAttributes = new Dictionary<string, string>
        {
            { "class", Class }
        };

        foreach (var otherAttr in otherAttrs)
        {
            newAttributes.Add(otherAttr.Key, otherAttr.Value);
        }

        // update image URL for jss handler and image rendering params
        var resolvedSrc = MediaApi.UpdateImageUrl(src, imageParams);
        if (srcSet != null && srcSet.Any())
        {
            newAttributes["srcSet"] = MediaApi.GetSrcSet(resolvedSrc, srcSet, imageParams);
        }
        else
        {
            newAttributes["src"] = resolvedSrc;
        }
        return newAttributes;
    }

    private string BuildImgHtml(IDictionary<string, string> attributes)
    {
        var imgHtml = new StringBuilder();
        imgHtml.Append("<img ");
        foreach (var attribute in attributes)
        {
            imgHtml.Append($"{attribute.Key}=\"{attribute.Value}\" ");
        }
        imgHtml.Append("/>");
        return imgHtml.ToString();
    }
}
