@inherits JssComponentBase

<Styleguide_Specimen Component="@Component"
                     E2eId="styleguide-layout-tabs">
    <ul class="nav nav-tabs">
        @for (var i = 0; i < Tabs.Count(); i++)
        {
            @*
                i must be copied into a separate variable, otherwise the onclick delegate will
                receive a reference to i and behave unexpectedly (i.e., crash because i is
                going to be evaluated as Tabs.Count() + 1 by the time onclick is invoked).
            *@
            var tabIndex = i;
            <li class="nav-item" @key="@GetTabKey(i)">
                @*
                    Note that as of .NET Core 3.0 Preview 9 there is no native mechanism to stop
                    event propagation on events (e.g., onclick). In the React sample app, the
                    href attribute in this sample is set to "#t" and event propagation is
                    (presumably) suppressed natively; here we must use "javascript: void(0);".
                *@
                <a class="@GetTabClass(tabIndex)"
                   @onclick="@(() => SetActiveTab(tabIndex))"
                   href="javascript: void(0);">
                    <PlainText Field="@Tabs[tabIndex].Fields["title"]" />
                </a>
            </li>
        }
    </ul>
    <div class="p-3 border-left border-right border-bottom">
        <Styleguide_Layout_Tabs_Tab Component="@Tabs[ActiveTabIndex]" />
    </div>
</Styleguide_Specimen>

@code {
    private int ActiveTabIndex { get; set; } = 0;

    private ComponentDefinition[] Tabs { get; set; }

    protected override void OnParametersSet()
    {
        Tabs = Component.Placeholders["jss-tabs"].Where(c => c.Uid != Guid.Empty).ToArray();
    }

    private string GetTabKey(int tabIndex)
    {
        return $"tab{tabIndex}";
    }

    private string GetTabClass(int tabIndex)
    {
        var tabClass = "nav-link";
        return ActiveTabIndex == tabIndex ? $"{tabClass} active" : tabClass;
    }

    public void SetActiveTab(int tabIndex)
    {
        ActiveTabIndex = tabIndex;
    }
}
