@inherits JssComponentBase
@inject ITrackingApi TrackingApi
@inject SitecoreConfiguration SitecoreConfiguration

<Styleguide_Specimen Component="@Component"
                     E2eId="styleguide-tracking">
    <div>
        <p class="alert alert-warning">
            Note: The JSS tracker API is disabled by default. Consult the <a href="https://jss.sitecore.com/docs/fundamentals/services/tracking">tracking documentation</a> to enable it.
        </p>
        <div class="row">
            <fieldset class="form-group col-sm">
                <legend>Event</legend>
                <p>
                    Events are defined in <code>/sitecore/system/Settings/Analytics/Page Events</code>
                </p>
                <label htmlFor="event">Event GUID or Name</label>
                <input type="text"
                       id="event"
                       class="form-control"
                       @bind="_event"
                       placeholder="e.g., Download brochure" />
                <button type="button"
                        class="btn btn-primary mt-3"
                        @onclick="SubmitEventAsync">
                    Submit
                </button>
            </fieldset>

            <fieldset class="form-group col-sm">
                <legend>Goal</legend>
                <p>
                    Goals are defined in <code>/sitecore/system/Marketing Control Panel/Goals</code>
                </p>
                <label htmlFor="goal">Goal GUID or Name</label>
                <input type="text"
                       class="form-control"
                       id="goal"
                       @bind="_goal"
                       placeholder="e.g., Register" />
                <button type="button"
                        class="btn btn-primary mt-3"
                        @onclick="SubmitGoalAsync">
                    Submit
                </button>
            </fieldset>
        </div>
        <div class="row">
            <fieldset class="form-group col-sm">
                <legend>Outcome</legend>
                <p>
                    Outcomes are defined in
                    <code>/sitecore/system/Marketing Control Panel/Outcomes</code>
                </p>
                <label htmlFor="outcomeName">Outcome GUID or Name</label>
                <input type="text"
                       class="form-control"
                       id="outcomeName"
                       @bind="_outcomeName"
                       placeholder="e.g., Marketing Lead" />
                <br />
                <label htmlFor="outcomeValue">Monetary Value (optional)</label>
                <input type="number"
                       class="form-control"
                       id="outcomeValue"
                       @bind="_outcomeValue"
                       placeholder="e.g., 1337.00" />
                <button type="button"
                        class="btn btn-primary mt-3"
                        @onclick="SubmitOutcomeAsync">
                    Submit
                </button>
            </fieldset>

            <fieldset class="form-group col-sm">
                <legend>Campaign</legend>
                <p>
                    Campaigns are defined in
                    <code>/sitecore/system/Marketing Control Panel/Campaigns</code>
                </p>
                <label htmlFor="campaign">Campaign GUID or Name</label>
                <input type="text"
                       class="form-control"
                       id="campaign"
                       @bind="_campaign"
                       placeholder="e.g., Twitter Share Buttons" />
                <button type="button"
                        class="btn btn-primary mt-3"
                        @onclick="TriggerCampaignAsync">
                    Submit
                </button>
            </fieldset>
        </div>
        <div class="row">
            <fieldset class="form-group col-sm">
                <legend>Page View</legend>
                <p>
                    Track arbitrary page views for custom routing or offline use. Note that Layout
                    Service tracks page views by default unless <code>tracking=false</code> is passed
                    in its query string.
                </p>
                <label htmlFor="pageId">Page Item GUID</label>
                <input type="text"
                       class="form-control"
                       id="pageId"
                       @bind="_pageId"
                       placeholder="e.g., {11111111-1111-1111-1111-111111111111}" />
                <br />
                <label htmlFor="pageUrl">Page URL</label>
                <input type="text"
                       class="form-control"
                       id="pageUrl"
                       @bind="_pageUrl"
                       placeholder="e.g., /foo/bar" />
                <button type="button"
                        class="btn btn-primary mt-3"
                        @onclick="SubmitPageViewAsync">
                    Submit
                </button>
            </fieldset>

            <fieldset class="form-group col-sm">
                <legend>Batching</legend>
                <p>
                    The tracking API supports pushing a whole batch of events in a single request.
                    This can be useful for queuing strategies or offline PWA usage.
                </p>
                <button type="button"
                        class="btn btn-primary"
                        @onclick="SubmitBatchingAsync">
                    Submit Batch of Events
                </button>
            </fieldset>
        </div>
        <div class="row">
            <fieldset class="form-group col-sm">
                <legend>Interaction Control</legend>
                <p>
                    Tracking data is not pushed into the xConnect service until your session ends on
                    the Sitecore server. Click this button to instantly end your session and flush the
                    data - great for debugging and testing.
                </p>
                <p class="alert alert-warning">
                    Note: By default <em>anonymous</em> contacts will not be shown in Experience
                    Profile. If your interactions are not showing up in Experience Profile, you may
                    need to
                    <a href="https://doc.sitecore.net/developers/xp/xconnect/xconnect-search-indexer/enable-anonymous-contact-indexing.html">
                        enable anonymous contact indexing.
                    </a>
                </p>
                <button type="button"
                        class="btn btn-primary"
                        @onclick="AbandonSessionAsync">
                    End Interaction
                </button>
            </fieldset>
        </div>
    </div>
</Styleguide_Specimen>

@code {
    private string _event;
    private string _goal;
    private string _outcomeName;
    private decimal? _outcomeValue;
    private string _campaign;
    private string _pageId;
    private string _pageUrl;

    private TrackingRequestOptions _trackingRequestOptions;

    protected override void OnParametersSet()
    {
        _trackingRequestOptions = new TrackingRequestOptions
        {
            Host = SitecoreConfiguration.SitecoreApiHost,
            QueryStringParams = new Dictionary<string, string>
            {
                { "sc_apikey", SitecoreConfiguration.SitecoreApiKey.ToString("N") }
            }
        };
    }

    public async Task SubmitEventAsync() => await TrackingApi.TrackEventAsync(new Event { EventId = _event }, _trackingRequestOptions);
    public async Task SubmitGoalAsync() => await TrackingApi.TrackEventAsync(new Goal { GoalId = _goal }, _trackingRequestOptions);
    public async Task SubmitOutcomeAsync() => await TrackingApi.TrackEventAsync(new Outcome { OutcomeId = _outcomeName, CurrencyCode = "USD", MonetaryValue = _outcomeValue }, _trackingRequestOptions);
    public async Task TriggerCampaignAsync() => await TrackingApi.TrackEventAsync(new Campaign { CampaignId = _campaign }, _trackingRequestOptions);
    public async Task SubmitPageViewAsync() => await TrackingApi.TrackEventAsync(new PageView { PageId = _pageId, Url = _pageUrl }, _trackingRequestOptions);

    public async Task SubmitBatchingAsync()
    {
        var events = new ITrackingModel[]
        {
            new Event { EventId = "Download" },
            new Goal { GoalId = "Instant Demo" },
            new Outcome { OutcomeId = "Opportunity" },
            new PageView { PageId = "{110D559F-DEA5-42EA-9C1C-8A5DF7E70EF9}", Url = "/arbitrary/url/you/own" },
            // this goal will be added to the new page/route ID set above, not the current route
            new Goal { GoalId = "Register" }
        };
        await TrackingApi.TrackEventsAsync(events, _trackingRequestOptions);
    }

    public async Task AbandonSessionAsync()
    {
        var abandonOptions = new TrackingRequestOptions
        {
            Action = "Flush",
            Host = _trackingRequestOptions.Host,
            QueryStringParams = _trackingRequestOptions.QueryStringParams,
            ServiceUrl = _trackingRequestOptions.ServiceUrl
        };
        await TrackingApi.TrackEventAsync(null, abandonOptions);
    }
}
